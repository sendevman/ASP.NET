Done
- Domain driven design infrastructure
  - Entities
  - Repositories
  - Services
  - Unit of work
  - DTO (Data transfer objects)
    - DTO auto mappings
- ORM integration
  - Fluent mapping
- Database migrations
- Logging
- Dependency Injection
- Web layer
  - Dynamic service WebApi creation
- Client
  - Dynamic service proxy generation

-------------------------------------------------------------------------------------------------
Primary TODO:

+ Make login page fully ajax-based

- User .cshtml views as durandal views -> OK
  - Find a proper way of placing a view to another folder than Views\<ControllerName>\...

Move AccountController, DurandalViewController and other needed controllers to base classes in the Abp framework!

- Server side interceptions
	- Application service
	  + DTO Validation
	  - Authorization
	- Web api (dynamic)
	  - Exception handling
	- Web api (not dynamic api)
	  - Exception handling
	  - Authorization
	- MVC layer
	  - Exception handling
	  - Authorization

- Client-side validation-object generator for DTO's.

- Feature-based authorization
  - Tenant-specific feature?
  - Edition features (Standart edition, Premium edition v.s.)
  - User membership features (Gold member, Standart member v.s.)
  - Roles, role-features (static roles)
  - User-specific features
  - User-feature-template

- Checking a feature
  - Find current USER, current TENANCY of user, current EDITION of the tenant
  - EDITION has this feature -- or TENANT has special-privilege for this?
	- no: ERROR!
    - yes
	  - any of ROLEs of the USER has this feature (single or multiple role?)
	    - yes
		  - USER has special-deny for this
		    - yes: ERROR!
			- no: OK!
		- no
		  - USER has special-privilege for this
		    - yes: OK
			- no: ERROR!

+ Create WebApi proxy and Javascript proxy for GET, POST, PUT and DELETE operations.
  - Will be tested with different count and type of parameters.

- Create IDomainService & IApplicationService interfaces!
- Auto create DTO objects (plain & knockout)
- Bundle service calls (JS prepare requests, run all bundle request, runs all on server and returns bundle response)
- Make use of NHibernate auto mapping
- Authrization system
  - Authentication
  - Edition system
  - Feature system
  - Authroization for
    - Js viewmodels
	- Mvc controllers
	- Mvc views
	- Web api controllers
	- Service methods
- Using razor for durandal views
- Server side validation
- Client side validation
- Make auto mapping (for DTO and other classes) easier to use and standard to implement!
- Implement best practices for guard clauses?
- Localization improvement
- Develop ASP.NET MVC Widget System!
- Make validation messages nicer!

-------------------------------------------------------------------------------------------------
Modules.Core
- Tenant
  - Edition: Premium edition, Standart edition... so on.
- Edition
- Feature system
  - Dependent features
  - Child features
  - Pages, general features
- Client side
  - Show application according to tenant edition (Get features for current tenant edition/application-role/user-authorization-template (dynamic roles)/user)
    - Menu customization
	- In-page customization
- Server side
  - Web api actions
    - Authorization upon features
  - Mvc actions
    - Authorization upon features

------------------------------------
Request -> Set User.Current (from authentication) -> Set Tenant.Current (from session) -> Set Edition.Current (of tenant) -> Authorization (feature based) -> Execute request -> Handle exceptions -> Response

-------------------------------------------------------------------------------------------------
- Specification pattern?

-------------------------------------------------------------------------------------------------

TODO:

- Service interceptions
  - Authorization checks
  - Transactions? (implemented by UnitOfWork interceptor already, so?)
  - DTO Validations and checks?
  - Exception handling?

- Repository interceptors
  - Tenancy filter
  - Write history/log
  - Set Audit properties
  - Set current tenant/user

- Use NHibernate L2? caching
- Exception handling in Controllers and ApiControllers
- JS&CSS Minimization and bundle (best practices!)

- User management system
- Role (user templates) management system
- Tenant system and Cloud!
- Usage logging/history (detailed auditing)

- Authentication notes
  - Preventing Cross-Site Request Forgery (CSRF) 
  - External Authentication Services (twitter, facebook etc.)
  - OAuth???

--------------------------

Authorization
- Anonymous pages -> can see public pages
- Application pages -> can use application
- Administration pages -> can change site behaivour

--------------------------
PAGES
- CLOUD Administrating 

  - Seperated SPA application
    - Pages those are over tenant accounts and to manage account system etc.. (authenticated & authorized)
      - ex: list of tenant accounts page

  - public pages (authenticated but not authorized)
    - ex: Pages to create tenant accounts by logged in users!

  - anaonymous pages (not authenticated)
    - ex: Pages those describes the system to all internet users

- APPLICATIN Pages (An Tenant account perspective) (can be entered by a subdomain or sub-folder (www.ABC.com/tenantname or tenantname.ABC.com?)

  - Seperated SPA application
    - Pages to use and manage the application (authenticated & authorized)
      - ex: user authorization page, a page to use application
    - public pages (authenticated but not authorized)
      - pages those are seen by all logged in tenant users
  
  - Not SPA pages
    - anaonymous pages (not authenticated)
      - Pages those describes the system to all internet users

Membership models
- To be a member of CLOUD (to create an tenant account)
  - Private membership (can only added by administrator of the application (tenant account), no register page)
  - Sign up by invitation (authorized users of a tenant account can send invitations).
  - Sign up publicly
  - Validations/Confirmations (optionally)
	- With email validation
    - With admin confirmation
- To be a member of an APPLICATION (Tenant account)
  - Private membership (can only added by administrator of the application (tenant account))
  - Sign up by invitation (authorized users of tenant can send invitations).
  - Sign up publicly
    - With admin confirmation
	- With email confirmation
	- Without any confirmation

ROLES
- Cloud roles (authorization templates) -> cloudadmin user is a special user!
- Application roles (authorization templates) -> appadmin user = Tenant account owner is a special user!


----------------------------
- **** Cloud or Not Cloud option! If we don't want to cloud, we can use the default single tenant (application) ****

????:
- Windows single sign on support?

======================================================================================================================

Web project folder structure:
-----------------------------
- App_Start
- Areas
  - Abp
    - Views (maybe)
  - Taskever
    - Views
	- Models
	- Controllers
- Content (third party contents installed via Nuget)
- Dependency (dependency injection codes)
- Spa
  - Abp
    - Framework
    - Modules
	  - Core
  - Taskever
    - Home SPA
      - viewmodels
	  - views
	  - models
	- Admin SPA
	  -
- Scripts (third party scripts installed via Nuget)
- Resources
  - Abp
    - images
	- scripts
	- styles
  - Taskever
    - images
	- scripts
	- styles

ROUTES:
---------
- ASP.NET MVC Pages
  - /{areaName}/{controller}/{action}
- Web api
  - /api/{controller}/{id}
- Dynamic service api
  - /api/services/{serviceName}/{action}
  - /api/serviceproxies/{serviceName}.js
